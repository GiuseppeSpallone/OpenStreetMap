children_way_tag = nd.getChildren("tag");

                if (children_way_tag.size() > 0) {
                    HashSet<String> tipiStrade = new HashSet<>();
                    tags = new HashMap<>();

                    tipiStrade.add("primary");
                    tipiStrade.add("primary_link");
                    tipiStrade.add("secondary");
                    tipiStrade.add("tertiary");
                    tipiStrade.add("unclassified");
                    tipiStrade.add("residential");
                    tipiStrade.add("service");
                    tipiStrade.add("secondary_link");
                    tipiStrade.add("tertiary_link");
                    tipiStrade.add("living_street");
                    tipiStrade.add("mini_roundabout");
                    tipiStrade.add("pedestrian");
                    tipiStrade.add("cycleway");

                    for (Iterator it3 = children_way_tag.iterator(); it3.hasNext(); ) {
                        Element nd3 = (Element) it3.next();

                        boolean imp = false;
                        boolean oneway = false;
                        boolean building = false;
                        boolean tunnel = false;
                        boolean stopImp = false;
                        boolean cycleway_lane = false;
                        boolean cycleway_opposite_lane = false;

                        String k = nd3.getAttribute("k").getValue();
                        String v = nd3.getAttribute("v").getValue();

                        if (k != null) {

                            if (setBooleanTag(k, v, "tunnel"))
                                tunnel = true;

                            if (setBooleanTag(k, v, "junction"))
                                imp = true;

                            if (setBooleanTag(k, v, "oneway"))
                                oneway = true;

                            if (setBooleanTag(k, v, "building"))
                                building = true;

                            if (k.equals("highway")) {
                                if (v != null) {
                                    if (tipiStrade.contains(v)) {
                                        imp = true;
                                    }
                                }
                            }

                            Integer i = tags.get(k);
                            if (i != null) {
                                i = i.intValue() + 1;
                            } else {
                                i = 1;
                            }
                            tags.put(k, i);
                        }
                    }
                }




private boolean setBooleanTag(String k, String v, String value) {
        if (k.equals(value)) {
            if (v.equals("yes")) {
                return true;
            }
        }
        return false;
    }