package com.OpenStreetMap.View;

import com.OpenStreetMap.Controller.ControllerRoutes;
import com.OpenStreetMap.Controller.ControllerStop;
//import com.OpenStreetMap.Controller.ControllerStop2;
import com.OpenStreetMap.Controller.ControllerStudenti;
import com.OpenStreetMap.Controller.Database;
import com.OpenStreetMap.Controller.Dijkstra;
import com.OpenStreetMap.Controller.Export;
import com.OpenStreetMap.Controller.ImportMap;
import com.OpenStreetMap.Controller.ImportPlotMap;
import com.OpenStreetMap.Controller.Visit;
import com.OpenStreetMap.Model.Arc;
import com.OpenStreetMap.Model.Node;
import com.OpenStreetMap.Model.Percorso;
import com.OpenStreetMap.Model.Route;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import javax.swing.filechooser.FileNameExtensionFilter;

public class GUI extends javax.swing.JFrame {

    ImportMap importMap = new ImportMap();
    Export export = new Export();
    Database database = new Database();
    ImportPlotMap importPlotMap = new ImportPlotMap();
    ControllerRoutes controllerRoutes = new ControllerRoutes();
    ControllerStudenti controllerStudenti = new ControllerStudenti();
    ControllerStop controllerStop = new ControllerStop();
    //ControllerStop2 controllerStop2 = new ControllerStop2();
    Visit visit = new Visit();
    Dijkstra dijkstra = new Dijkstra();

    private DB dbStreetMap = null;
    private HashMap<Long, Node> nodes = null;
    private HashSet<Arc> arcs = null;
    private HashMap<Long, Node> nodes_paint = null;
    private HashSet<Arc> arcs_paint = null;
    private HashSet<Route> routes = null;
    private HashSet<Node> nodes_students = null;

    private File file = null;

    boolean plotMap = true;
    boolean plotRoute = true;
    boolean plotStudents = true;

    double zoom = 1.0;
    double sfasx = 0;
    double sfasy = 0;

    double px = 0;
    double py = 0;

    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane = new javax.swing.JTabbedPane();
        mappa_jPanel = new javax.swing.JPanel();
        mappaTratte_jPanel = new javax.swing.JPanel();
        mappa_jCheckBox = new javax.swing.JCheckBox();
        tratte_jCheckBox = new javax.swing.JCheckBox();
        utenti_jCheckBox = new javax.swing.JCheckBox();
        calcolaFermate_jButton = new javax.swing.JButton();
        tratteOutput_jScrollPane = new javax.swing.JScrollPane();
        tratteOutput_jPanel = new javax.swing.JPanel();
        utentiOutput_jScrollPane = new javax.swing.JScrollPane();
        studentiOutput_jPanel = new javax.swing.JPanel();
        calcolaFermate_jScrollPane = new javax.swing.JScrollPane();
        calcolaFermate_jPanel = new javax.swing.JPanel();
        calcolaFermate2_jButton = new javax.swing.JButton();
        valueOutput_jScrollPane = new javax.swing.JScrollPane();
        valueOutput_jPanel = new javax.swing.JPanel();
        mappaPlot_jPanel = new JPanel(){

            @Override
            public void paint(Graphics g) {
                super.paint(g);
                disegna(g);
            }

        };
        tratte_jPanel = new javax.swing.JPanel();
        tratte_jButton = new javax.swing.JButton();
        idealRoute_jButton = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        tratteInput_jTextArea = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        utentiInput_jTextArea = new javax.swing.JTextArea();
        infoTratte_jButton = new javax.swing.JButton();
        infoUtenti_jButton = new javax.swing.JButton();
        altro_jPanel = new javax.swing.JPanel();
        sLat_jTextField = new javax.swing.JTextField();
        sLon_jTextField = new javax.swing.JTextField();
        dLat_jTextField = new javax.swing.JTextField();
        dLon_jTextField = new javax.swing.JTextField();
        randomDijkstra_jButton = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        dijkstraOutput_jTextArea = new javax.swing.JTextArea();
        dijkstra_jButton = new javax.swing.JButton();
        lat_jTextField = new javax.swing.JTextField();
        lon_jTextField = new javax.swing.JTextField();
        randomVisita_jButton = new javax.swing.JButton();
        jScrollPane10 = new javax.swing.JScrollPane();
        visitaOutput_jTextArea = new javax.swing.JTextArea();
        visita_jButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuBar = new javax.swing.JMenuBar();
        mappa_jMenu = new javax.swing.JMenu();
        caricaEsporta_jMenuItem = new javax.swing.JMenuItem();
        disegna_jMenuItem = new javax.swing.JMenuItem();
        reset_jMenuItem = new javax.swing.JMenuItem();
        cancella_jMenuItem = new javax.swing.JMenuItem();
        report_jMenuItem = new javax.swing.JMenuItem();
        esci_jMenuItem = new javax.swing.JMenuItem();
        database_jMenu = new javax.swing.JMenu();
        connettiDB_jMenuItem = new javax.swing.JMenuItem();
        inserisciDB_jMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jTabbedPane.setEnabled(false);

        mappaTratte_jPanel.setEnabled(false);

        mappa_jCheckBox.setSelected(true);
        mappa_jCheckBox.setText("Mappa");
        mappa_jCheckBox.setEnabled(false);
        mappa_jCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mappa_jCheckBoxActionPerformed(evt);
            }
        });

        tratte_jCheckBox.setSelected(true);
        tratte_jCheckBox.setText("Tratte");
        tratte_jCheckBox.setEnabled(false);
        tratte_jCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tratte_jCheckBoxActionPerformed(evt);
            }
        });

        utenti_jCheckBox.setSelected(true);
        utenti_jCheckBox.setText("Studenti");
        utenti_jCheckBox.setEnabled(false);
        utenti_jCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                utenti_jCheckBoxActionPerformed(evt);
            }
        });

        calcolaFermate_jButton.setText("1");
        calcolaFermate_jButton.setEnabled(false);
        calcolaFermate_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcolaFermate_jButtonActionPerformed(evt);
            }
        });

        tratteOutput_jPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tratteOutput_jPanel.setLayout(new javax.swing.BoxLayout(tratteOutput_jPanel, javax.swing.BoxLayout.PAGE_AXIS));
        tratteOutput_jScrollPane.setViewportView(tratteOutput_jPanel);

        studentiOutput_jPanel.setLayout(new javax.swing.BoxLayout(studentiOutput_jPanel, javax.swing.BoxLayout.PAGE_AXIS));
        utentiOutput_jScrollPane.setViewportView(studentiOutput_jPanel);

        calcolaFermate_jPanel.setLayout(new javax.swing.BoxLayout(calcolaFermate_jPanel, javax.swing.BoxLayout.PAGE_AXIS));
        calcolaFermate_jScrollPane.setViewportView(calcolaFermate_jPanel);

        calcolaFermate2_jButton.setText("2");
        calcolaFermate2_jButton.setEnabled(false);
        calcolaFermate2_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcolaFermate2_jButtonActionPerformed(evt);
            }
        });

        valueOutput_jPanel.setLayout(new javax.swing.BoxLayout(valueOutput_jPanel, javax.swing.BoxLayout.PAGE_AXIS));
        valueOutput_jScrollPane.setViewportView(valueOutput_jPanel);

        javax.swing.GroupLayout mappaTratte_jPanelLayout = new javax.swing.GroupLayout(mappaTratte_jPanel);
        mappaTratte_jPanel.setLayout(mappaTratte_jPanelLayout);
        mappaTratte_jPanelLayout.setHorizontalGroup(
            mappaTratte_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tratteOutput_jScrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mappaTratte_jPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(calcolaFermate_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(calcolaFermate2_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(utentiOutput_jScrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(mappaTratte_jPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mappa_jCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tratte_jCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(utenti_jCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(valueOutput_jScrollPane)
            .addComponent(calcolaFermate_jScrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        mappaTratte_jPanelLayout.setVerticalGroup(
            mappaTratte_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mappaTratte_jPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mappaTratte_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mappa_jCheckBox)
                    .addComponent(tratte_jCheckBox)
                    .addComponent(utenti_jCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tratteOutput_jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(utentiOutput_jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(valueOutput_jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(calcolaFermate_jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mappaTratte_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(calcolaFermate_jButton)
                    .addComponent(calcolaFermate2_jButton)))
        );

        mappaPlot_jPanel.setBackground(new java.awt.Color(255, 255, 255));
        mappaPlot_jPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                mappaPlot_jPanelMouseDragged(evt);
            }
        });
        mappaPlot_jPanel.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                mappaPlot_jPanelMouseWheelMoved(evt);
            }
        });
        mappaPlot_jPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mappaPlot_jPanelMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                mappaPlot_jPanelMousePressed(evt);
            }
        });

        javax.swing.GroupLayout mappaPlot_jPanelLayout = new javax.swing.GroupLayout(mappaPlot_jPanel);
        mappaPlot_jPanel.setLayout(mappaPlot_jPanelLayout);
        mappaPlot_jPanelLayout.setHorizontalGroup(
            mappaPlot_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1059, Short.MAX_VALUE)
        );
        mappaPlot_jPanelLayout.setVerticalGroup(
            mappaPlot_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout mappa_jPanelLayout = new javax.swing.GroupLayout(mappa_jPanel);
        mappa_jPanel.setLayout(mappa_jPanelLayout);
        mappa_jPanelLayout.setHorizontalGroup(
            mappa_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mappa_jPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mappaPlot_jPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(mappaTratte_jPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );
        mappa_jPanelLayout.setVerticalGroup(
            mappa_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mappa_jPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mappa_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mappaTratte_jPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mappaPlot_jPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        mappaPlot_jPanel.getAccessibleContext().setAccessibleDescription("");

        jTabbedPane.addTab("Mappa", mappa_jPanel);

        tratte_jButton.setText("Tratte");
        tratte_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tratte_jButtonActionPerformed(evt);
            }
        });

        idealRoute_jButton.setText("Studenti");
        idealRoute_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idealRoute_jButtonActionPerformed(evt);
            }
        });

        tratteInput_jTextArea.setColumns(20);
        tratteInput_jTextArea.setRows(5);
        jScrollPane11.setViewportView(tratteInput_jTextArea);

        utentiInput_jTextArea.setColumns(20);
        utentiInput_jTextArea.setRows(5);
        jScrollPane4.setViewportView(utentiInput_jTextArea);

        infoTratte_jButton.setText("Info");
        infoTratte_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoTratte_jButtonActionPerformed(evt);
            }
        });

        infoUtenti_jButton.setText("Info");
        infoUtenti_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoUtenti_jButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tratte_jPanelLayout = new javax.swing.GroupLayout(tratte_jPanel);
        tratte_jPanel.setLayout(tratte_jPanelLayout);
        tratte_jPanelLayout.setHorizontalGroup(
            tratte_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tratte_jPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tratte_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(tratte_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(infoTratte_jButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(tratte_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 201, Short.MAX_VALUE)
                .addGroup(tratte_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
                    .addComponent(idealRoute_jButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(infoUtenti_jButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        tratte_jPanelLayout.setVerticalGroup(
            tratte_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tratte_jPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tratte_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 776, Short.MAX_VALUE)
                    .addComponent(jScrollPane4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tratte_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(idealRoute_jButton)
                    .addComponent(tratte_jButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tratte_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(infoTratte_jButton)
                    .addComponent(infoUtenti_jButton))
                .addContainerGap())
        );

        jTabbedPane.addTab("Tratte", tratte_jPanel);

        sLon_jTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sLon_jTextFieldActionPerformed(evt);
            }
        });

        dLat_jTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dLat_jTextFieldActionPerformed(evt);
            }
        });

        dLon_jTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dLon_jTextFieldActionPerformed(evt);
            }
        });

        randomDijkstra_jButton.setText("Random");
        randomDijkstra_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomDijkstra_jButtonActionPerformed(evt);
            }
        });

        dijkstraOutput_jTextArea.setColumns(20);
        dijkstraOutput_jTextArea.setRows(5);
        jScrollPane9.setViewportView(dijkstraOutput_jTextArea);

        dijkstra_jButton.setText("Dijkstra");
        dijkstra_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dijkstra_jButtonActionPerformed(evt);
            }
        });

        randomVisita_jButton.setText("Random");
        randomVisita_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomVisita_jButtonActionPerformed(evt);
            }
        });

        visitaOutput_jTextArea.setColumns(20);
        visitaOutput_jTextArea.setRows(5);
        jScrollPane10.setViewportView(visitaOutput_jTextArea);

        visita_jButton.setText("Visita");
        visita_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visita_jButtonActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout altro_jPanelLayout = new javax.swing.GroupLayout(altro_jPanel);
        altro_jPanel.setLayout(altro_jPanelLayout);
        altro_jPanelLayout.setHorizontalGroup(
            altro_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(altro_jPanelLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(altro_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sLon_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dLat_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dLon_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(randomDijkstra_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sLat_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(altro_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                    .addComponent(dijkstra_jButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(altro_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(altro_jPanelLayout.createSequentialGroup()
                        .addComponent(randomVisita_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(visita_jButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(altro_jPanelLayout.createSequentialGroup()
                        .addGroup(altro_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lat_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lon_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 56, Short.MAX_VALUE))
        );
        altro_jPanelLayout.setVerticalGroup(
            altro_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(altro_jPanelLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(altro_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(altro_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(altro_jPanelLayout.createSequentialGroup()
                            .addGroup(altro_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(altro_jPanelLayout.createSequentialGroup()
                                    .addComponent(sLat_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(sLon_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(dLat_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(dLon_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane9))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(altro_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(randomDijkstra_jButton)
                                .addComponent(dijkstra_jButton)))
                        .addGroup(altro_jPanelLayout.createSequentialGroup()
                            .addGroup(altro_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(altro_jPanelLayout.createSequentialGroup()
                                    .addComponent(lat_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lon_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(71, 71, 71))
                                .addGroup(altro_jPanelLayout.createSequentialGroup()
                                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(altro_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(randomVisita_jButton)
                                .addComponent(visita_jButton)))))
                .addContainerGap(654, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Altro", altro_jPanel);

        mappa_jMenu.setText("Mappa");

        caricaEsporta_jMenuItem.setText("Carica/Esporta");
        caricaEsporta_jMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                caricaEsporta_jMenuItemActionPerformed(evt);
            }
        });
        mappa_jMenu.add(caricaEsporta_jMenuItem);

        disegna_jMenuItem.setText("Disegna");
        disegna_jMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disegna_jMenuItemActionPerformed(evt);
            }
        });
        mappa_jMenu.add(disegna_jMenuItem);

        reset_jMenuItem.setText("Reset");
        reset_jMenuItem.setEnabled(false);
        reset_jMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reset_jMenuItemActionPerformed(evt);
            }
        });
        mappa_jMenu.add(reset_jMenuItem);

        cancella_jMenuItem.setText("Cancella");
        cancella_jMenuItem.setEnabled(false);
        cancella_jMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancella_jMenuItemActionPerformed(evt);
            }
        });
        mappa_jMenu.add(cancella_jMenuItem);

        report_jMenuItem.setText("Report");
        report_jMenuItem.setEnabled(false);
        report_jMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                report_jMenuItemActionPerformed(evt);
            }
        });
        mappa_jMenu.add(report_jMenuItem);

        esci_jMenuItem.setText("Esci");
        esci_jMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                esci_jMenuItemActionPerformed(evt);
            }
        });
        mappa_jMenu.add(esci_jMenuItem);

        jMenuBar.add(mappa_jMenu);

        database_jMenu.setText("Database");

        connettiDB_jMenuItem.setText("Connetti");
        connettiDB_jMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connettiDB_jMenuItemActionPerformed(evt);
            }
        });
        database_jMenu.add(connettiDB_jMenuItem);

        inserisciDB_jMenuItem.setText("Inserisci");
        inserisciDB_jMenuItem.setEnabled(false);
        inserisciDB_jMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inserisciDB_jMenuItemActionPerformed(evt);
            }
        });
        database_jMenu.add(inserisciDB_jMenuItem);

        jMenuBar.add(database_jMenu);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1330, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 889, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void disegna_jMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disegna_jMenuItemActionPerformed
        file = openFile();
        if (disegnaMap(file)) {
            reset_jMenuItem.setEnabled(true);
            cancella_jMenuItem.setEnabled(true);
            report_jMenuItem.setEnabled(true);
            mappaTratte_jPanel.setEnabled(true);
            mappa_jCheckBox.setEnabled(true);
            tratte_jCheckBox.setEnabled(true);
            utenti_jCheckBox.setEnabled(true);
            jTabbedPane.setEnabled(true);
            mappaPlot_jPanel.repaint();
        }
    }//GEN-LAST:event_disegna_jMenuItemActionPerformed

    private void caricaEsporta_jMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_caricaEsporta_jMenuItemActionPerformed
        file = openFile();

        if (file != null) {
            importMap.create(file, 5, 2, 100, false, false);
            nodes = importMap.getNodes();
            arcs = importMap.getArcs();

            if (!nodes.isEmpty() || !arcs.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Mappa creata nodi: " + nodes.size() + " archi: " + arcs.size());

                connettiDB_jMenuItem.setEnabled(true);

                file = selectPath(true);
                if (esportaMap(file)) {
                    Object[] options = {"Si", "No"};
                    int option = JOptionPane.showOptionDialog(null, "Mappa esportata, disegnare mappa?", null, JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);

                    if (option == 0) {
                        if (disegnaMap(file)) {
                            reset_jMenuItem.setEnabled(true);
                            cancella_jMenuItem.setEnabled(true);
                            report_jMenuItem.setEnabled(true);
                            mappaTratte_jPanel.setEnabled(true);
                            mappa_jCheckBox.setEnabled(true);
                            tratte_jCheckBox.setEnabled(true);
                            utenti_jCheckBox.setEnabled(true);
                            jTabbedPane.setEnabled(true);
                            mappaPlot_jPanel.repaint();
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Mappa non esportata");
                }

            } else {
                JOptionPane.showMessageDialog(null, "Mappa non creata");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Mappa non caricata");
        }
    }//GEN-LAST:event_caricaEsporta_jMenuItemActionPerformed

    private void esci_jMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_esci_jMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_esci_jMenuItemActionPerformed

    private void connettiDB_jMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connettiDB_jMenuItemActionPerformed
        dbStreetMap = database.connectDB("localhost", 27017, "StreetMap");
        if (dbStreetMap != null) {
            JOptionPane.showMessageDialog(null, "Connesso al DB");
            inserisciDB_jMenuItem.setEnabled(true);
            connettiDB_jMenuItem.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(null, "Connessione al DB non riuscita");
        }
    }//GEN-LAST:event_connettiDB_jMenuItemActionPerformed

    private void inserisciDB_jMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inserisciDB_jMenuItemActionPerformed
        DBCollection collectionNode = database.getCollection(dbStreetMap, "Node");
        DBCollection collectionWay = database.getCollection(dbStreetMap, "Way");
        DBCollection collectionArc = database.getCollection(dbStreetMap, "Arc");

        database.insertNodesDB(collectionNode, importMap.getNodes());
        database.insertWaysDB(collectionWay, importMap.getWays());
        database.insertArcsDB(collectionArc, importMap.getArcs());

        JOptionPane.showMessageDialog(null, "Elementi inseriti");
    }//GEN-LAST:event_inserisciDB_jMenuItemActionPerformed

    private void reset_jMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reset_jMenuItemActionPerformed
        resetComponent();
        resetMark();
        resetStudent();
        routes = null;
        nodes_students = null;
        routes = null;

        mappaPlot_jPanel.repaint();
    }//GEN-LAST:event_reset_jMenuItemActionPerformed

    private void cancella_jMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancella_jMenuItemActionPerformed
        resetComponent();
        resetMark();
        cancel();

        mappaPlot_jPanel.repaint();
    }//GEN-LAST:event_cancella_jMenuItemActionPerformed

    private void idealRoute_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idealRoute_jButtonActionPerformed
        nodes_students = null;
        mappaPlot_jPanel.repaint();

        studentiOutput_jPanel.removeAll();
        studentiOutput_jPanel.validate();
        calcolaFermate_jPanel.removeAll();
        calcolaFermate_jPanel.validate();
        valueOutput_jPanel.removeAll();
        valueOutput_jPanel.validate();

        String area = utentiInput_jTextArea.getText();
        nodes_students = controllerStudenti.read(area, nodes, routes);

        if (!nodes_students.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Creati nodi studenti ");

            nodes_students = controllerStudenti.applyPercorsi(nodes, nodes_students, routes);
            nodes_students = controllerStudenti.idealPercorso(nodes_students);
            nodes_students = controllerStudenti.setStudentsRoute(nodes_students);

            calcolaFermate_jButton.setEnabled(true);
            calcolaFermate2_jButton.setEnabled(true);
            writeStudents();
            mappaPlot_jPanel.repaint();
        } else {
            JOptionPane.showMessageDialog(null, "Nodi studenti non creati");
        }


    }//GEN-LAST:event_idealRoute_jButtonActionPerformed

    private void tratte_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tratte_jButtonActionPerformed
        tratteOutput_jPanel.removeAll();
        tratteOutput_jPanel.validate();
        studentiOutput_jPanel.removeAll();
        studentiOutput_jPanel.validate();
        calcolaFermate_jPanel.removeAll();
        calcolaFermate_jPanel.validate();
        valueOutput_jPanel.removeAll();
        valueOutput_jPanel.validate();
        routes = null;
        nodes_students = null;
        mappaPlot_jPanel.repaint();

        String area = tratteInput_jTextArea.getText();
        routes = controllerRoutes.read(area, nodes);

        if (!routes.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Create " + routes.size() + " tratte");
            writeRoute();
            mappaPlot_jPanel.repaint();
        } else {
            JOptionPane.showMessageDialog(null, "Tratte non create");
        }
    }//GEN-LAST:event_tratte_jButtonActionPerformed

    private void utenti_jCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_utenti_jCheckBoxActionPerformed
        if (utenti_jCheckBox.isSelected()) {
            plotStudents = true;
            mappaPlot_jPanel.repaint();
        } else {
            plotStudents = false;
            mappaPlot_jPanel.repaint();
        }
    }//GEN-LAST:event_utenti_jCheckBoxActionPerformed

    private void tratte_jCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tratte_jCheckBoxActionPerformed
        if (tratte_jCheckBox.isSelected()) {
            plotRoute = true;
            mappaPlot_jPanel.repaint();
        } else {
            plotRoute = false;
            mappaPlot_jPanel.repaint();
        }
    }//GEN-LAST:event_tratte_jCheckBoxActionPerformed

    private void mappa_jCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mappa_jCheckBoxActionPerformed
        if (mappa_jCheckBox.isSelected()) {
            plotMap = true;
            mappaPlot_jPanel.repaint();
        } else {
            plotMap = false;
            mappaPlot_jPanel.repaint();
        }
    }//GEN-LAST:event_mappa_jCheckBoxActionPerformed

    private void calcolaFermate_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcolaFermate_jButtonActionPerformed
        controllerStop.run(nodes_students, routes);

        JOptionPane.showMessageDialog(null, "Create fermate");
        writeStops();
        writeValue();

        report_jMenuItem.setEnabled(true);
        mappaPlot_jPanel.repaint();
    }//GEN-LAST:event_calcolaFermate_jButtonActionPerformed

    private void visita_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visita_jButtonActionPerformed
        float lat = Float.parseFloat(lat_jTextField.getText());
        float lon = Float.parseFloat(lon_jTextField.getText());

        Node startingNode = Node.nodeByLatLon(nodes, lat, lon);

        ArrayList<Node> visit_nodes = visit.visita(nodes, startingNode);

        String output_visit = visit.printVisit(visit_nodes);
        visitaOutput_jTextArea.setText(output_visit);

        mappaPlot_jPanel.repaint();
    }//GEN-LAST:event_visita_jButtonActionPerformed

    private void randomVisita_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomVisita_jButtonActionPerformed
        Node startingNode = Node.randomNode(nodes);

        lat_jTextField.setText(String.valueOf(startingNode.getLat()));
        lon_jTextField.setText(String.valueOf(startingNode.getLon()));
    }//GEN-LAST:event_randomVisita_jButtonActionPerformed

    private void dijkstra_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dijkstra_jButtonActionPerformed
        float lat_s = Float.parseFloat(sLat_jTextField.getText());
        float lon_s = Float.parseFloat(sLon_jTextField.getText());
        float lat_d = Float.parseFloat(dLat_jTextField.getText());
        float lon_d = Float.parseFloat(dLon_jTextField.getText());

        Node sorgente = Node.nodeByLatLon(nodes, lat_s, lon_s);
        Node destinazione = Node.nodeByLatLon(nodes, lat_d, lon_d);

        Percorso percorso = dijkstra.run(sorgente, destinazione, nodes, true);

        String output_dijkstra = dijkstra.printPercorso(percorso);
        dijkstraOutput_jTextArea.setText(output_dijkstra);

        mappaPlot_jPanel.repaint();
    }//GEN-LAST:event_dijkstra_jButtonActionPerformed

    private void randomDijkstra_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomDijkstra_jButtonActionPerformed
        Node sorgente = Node.randomNode(nodes);
        Node destinazione = Node.randomNode(nodes);

        sLat_jTextField.setText(String.valueOf(sorgente.getLat()));
        sLon_jTextField.setText(String.valueOf(sorgente.getLon()));
        dLat_jTextField.setText(String.valueOf(destinazione.getLat()));
        dLon_jTextField.setText(String.valueOf(destinazione.getLon()));
    }//GEN-LAST:event_randomDijkstra_jButtonActionPerformed

    private void dLon_jTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dLon_jTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dLon_jTextFieldActionPerformed

    private void dLat_jTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dLat_jTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dLat_jTextFieldActionPerformed

    private void sLon_jTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sLon_jTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sLon_jTextFieldActionPerformed

    private void infoTratte_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoTratte_jButtonActionPerformed
        JPanel panelInfoTratte = new JPanel(new GridLayout(5, 1));
        JLabel info1_label = new JLabel("Per definire una tratta usare il carattere \"%\"");
        JLabel info2_label = new JLabel("% \"nome tratta\" \"numero fermate\" \"colore tratta (red, blue, green, orange, yellow)\"");
        JLabel info3_label = new JLabel("Per definire un elenco di punti usare il carattere \"#\" oppure \"*\"");
        JLabel info4_label = new JLabel("# \"latitudine\" \"longitudine\"");
        JLabel info5_label = new JLabel("* \"query string (nome paese, nome città, via)\"");
        panelInfoTratte.add(info1_label);
        panelInfoTratte.add(info2_label);
        panelInfoTratte.add(info3_label);
        panelInfoTratte.add(info4_label);
        panelInfoTratte.add(info5_label);

        final int MOSTRA = 0;
        final int ANNULLA = 1;

        Object[] options = {"Mostra esempio", "Annulla"};
        int option = JOptionPane.showOptionDialog(null, panelInfoTratte, "Info tratte", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);

        switch (option) {
            case MOSTRA:

                Node n1 = Node.randomNode(nodes);
                Node n2 = Node.randomNode(nodes);
                tratteInput_jTextArea.removeAll();
                tratteInput_jTextArea.validate();
                tratteInput_jTextArea.append("% trattaEsempio 1 blue \n"
                        + "# " + n1.getLat() + " " + n1.getLon() + "\n"
                        + "# " + n2.getLat() + " " + n2.getLon() + "\n");
                break;
            case ANNULLA:
                break;
        }
    }//GEN-LAST:event_infoTratte_jButtonActionPerformed

    private void infoUtenti_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoUtenti_jButtonActionPerformed
        JPanel panelInfoStudenti = new JPanel(new GridLayout(5, 1));
        JLabel info1_label = new JLabel("Per definire un nodo studente usare \"#\" oppure \"*\"");
        JLabel info2_label = new JLabel("# \"tratta di appartenenza\" \"latitudine\" \"longitudine\" \"numero studenti\"");
        JLabel info3_label = new JLabel("* \"tratta di appartenenza\" \"query string (nome paese, nome città, via)\" \"numero studenti\"");
        panelInfoStudenti.add(info1_label);
        panelInfoStudenti.add(info2_label);
        panelInfoStudenti.add(info3_label);

        final int MOSTRA = 0;
        final int ANNULLA = 1;

        Object[] options = {"Mostra esempio", "Annulla"};
        int option = JOptionPane.showOptionDialog(null, panelInfoStudenti, "Info studenti", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);

        switch (option) {
            case MOSTRA:

                Node n1 = Node.randomNode(nodes);
                Node n2 = Node.randomNode(nodes);
                Node n3 = Node.randomNode(nodes);
                utentiInput_jTextArea.removeAll();
                utentiInput_jTextArea.validate();
                utentiInput_jTextArea.append("# trattaEsempio " + n1.getLat() + " " + n1.getLon() + " 10\n"
                        + "# trattaEsempio " + n2.getLat() + " " + n2.getLon() + " 15\n"
                        + "# trattaEsempio " + n3.getLat() + " " + n3.getLon() + " 30\n");

                break;
            case ANNULLA:
                break;
        }
    }//GEN-LAST:event_infoUtenti_jButtonActionPerformed

    private void mappaPlot_jPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mappaPlot_jPanelMousePressed
        px = evt.getX();
        py = evt.getY();
    }//GEN-LAST:event_mappaPlot_jPanelMousePressed

    private void mappaPlot_jPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mappaPlot_jPanelMouseClicked
        int x = evt.getX();
        int y = evt.getY();

        Node n = getNodoVicinoByXY(x, y);
        System.out.println("index: " + n.getIndex() + "; id: " + n.getId() + "; " + n.getLat() + "," + n.getLon());

        JPanel panelMouseListener = new JPanel();
        JLabel node_label = new JLabel("index: " + n.getIndex() + "; id: " + n.getId() + " lat: " + n.getLat() + " lon: " + n.getLon());
        panelMouseListener.add(node_label);

        final int TRATTE = 0;
        final int UTENTI = 1;
        final int DIJKSTRA = 2;
        final int VISITA = 3;
        final int ANNULLA = 4;

        Object[] options = {"Tratte", "Utenti", "Dijkstra", "Visita", "Annulla"};
        int option = JOptionPane.showOptionDialog(null, panelMouseListener, "Nodo selezionato", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, options[0]);

        switch (option) {
            case TRATTE:
                tratteInput_jTextArea.append("# " + n.getLat() + " " + n.getLon() + "\n");
                break;
            case UTENTI:
                utentiInput_jTextArea.append("# " + n.getLat() + " " + n.getLon() + "\n");
                break;
            case DIJKSTRA:
                Object[] options2 = {"Sorgente", "Destinazione", "Annulla"};
                int option2 = JOptionPane.showOptionDialog(null, null, "Dijkstra", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, options2, options2[0]);

                if (option2 == 0) {
                    sLat_jTextField.setText(String.valueOf(n.getLat()));
                    sLon_jTextField.setText(String.valueOf(n.getLon()));
                }
                if (option2 == 1) {
                    dLat_jTextField.setText(String.valueOf(n.getLat()));
                    dLon_jTextField.setText(String.valueOf(n.getLon()));
                }
                if (option2 == 2) {
                    break;
                }
                break;
            case VISITA:
                lat_jTextField.setText(String.valueOf(n.getLat()));
                lon_jTextField.setText(String.valueOf(n.getLon()));
                break;
            case ANNULLA:
                break;
        }
    }//GEN-LAST:event_mappaPlot_jPanelMouseClicked

    private void mappaPlot_jPanelMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_mappaPlot_jPanelMouseWheelMoved

        if (evt.getWheelRotation() < 0) {
            zoom++;
        } else if (evt.getWheelRotation() > 0) {
            if (zoom > 1) {
                zoom--;
            }
        }
        mappaPlot_jPanel.repaint();
    }//GEN-LAST:event_mappaPlot_jPanelMouseWheelMoved

    private void mappaPlot_jPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mappaPlot_jPanelMouseDragged
        sfasx += px - evt.getX();
        sfasy += py - evt.getY();

        px = evt.getX();
        py = evt.getY();

        mappaPlot_jPanel.repaint();
    }//GEN-LAST:event_mappaPlot_jPanelMouseDragged

    private void report_jMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_report_jMenuItemActionPerformed
        file = selectPath(false);
        export.exportReport(file, nodes_students, routes);
    }//GEN-LAST:event_report_jMenuItemActionPerformed

    private void calcolaFermate2_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcolaFermate2_jButtonActionPerformed
        //controllerStop2.run(nodes_students, routes);

        writeStops();
        writeValue();

        report_jMenuItem.setEnabled(true);
        mappaPlot_jPanel.repaint();
    }//GEN-LAST:event_calcolaFermate2_jButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel altro_jPanel;
    private javax.swing.JButton calcolaFermate2_jButton;
    private javax.swing.JButton calcolaFermate_jButton;
    private javax.swing.JPanel calcolaFermate_jPanel;
    private javax.swing.JScrollPane calcolaFermate_jScrollPane;
    private javax.swing.JMenuItem cancella_jMenuItem;
    private javax.swing.JMenuItem caricaEsporta_jMenuItem;
    private javax.swing.JMenuItem connettiDB_jMenuItem;
    private javax.swing.JTextField dLat_jTextField;
    private javax.swing.JTextField dLon_jTextField;
    private javax.swing.JMenu database_jMenu;
    private javax.swing.JTextArea dijkstraOutput_jTextArea;
    private javax.swing.JButton dijkstra_jButton;
    private javax.swing.JMenuItem disegna_jMenuItem;
    private javax.swing.JMenuItem esci_jMenuItem;
    private javax.swing.JButton idealRoute_jButton;
    private javax.swing.JButton infoTratte_jButton;
    private javax.swing.JButton infoUtenti_jButton;
    private javax.swing.JMenuItem inserisciDB_jMenuItem;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTextField lat_jTextField;
    private javax.swing.JTextField lon_jTextField;
    private javax.swing.JPanel mappaPlot_jPanel;
    private javax.swing.JPanel mappaTratte_jPanel;
    private javax.swing.JCheckBox mappa_jCheckBox;
    private javax.swing.JMenu mappa_jMenu;
    private javax.swing.JPanel mappa_jPanel;
    private javax.swing.JButton randomDijkstra_jButton;
    private javax.swing.JButton randomVisita_jButton;
    private javax.swing.JMenuItem report_jMenuItem;
    private javax.swing.JMenuItem reset_jMenuItem;
    private javax.swing.JTextField sLat_jTextField;
    private javax.swing.JTextField sLon_jTextField;
    private javax.swing.JPanel studentiOutput_jPanel;
    private javax.swing.JTextArea tratteInput_jTextArea;
    private javax.swing.JPanel tratteOutput_jPanel;
    private javax.swing.JScrollPane tratteOutput_jScrollPane;
    private javax.swing.JButton tratte_jButton;
    private javax.swing.JCheckBox tratte_jCheckBox;
    private javax.swing.JPanel tratte_jPanel;
    private javax.swing.JTextArea utentiInput_jTextArea;
    private javax.swing.JScrollPane utentiOutput_jScrollPane;
    private javax.swing.JCheckBox utenti_jCheckBox;
    private javax.swing.JPanel valueOutput_jPanel;
    private javax.swing.JScrollPane valueOutput_jScrollPane;
    private javax.swing.JTextArea visitaOutput_jTextArea;
    private javax.swing.JButton visita_jButton;
    // End of variables declaration//GEN-END:variables

    private File openFile() {
        JFileChooser jFileChooser = new JFileChooser();
        jFileChooser.setDialogTitle("Scegli file streetMap");

        if (jFileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            String pathFile = jFileChooser.getSelectedFile().getPath();

            File file = new File(pathFile);

            System.out.println("SCELTA FILE");
            System.out.println("   Aperto file: " + pathFile);

            return file;
        } else {
            System.out.println("Nessun file selezionato");
            return null;
        }
    }

    private File selectPath(boolean map) {
        FileNameExtensionFilter grfFilter;
        if (map) {
            grfFilter = new FileNameExtensionFilter("osm.grf files (*osm.grf)", "osm.grf");
        } else {
            grfFilter = new FileNameExtensionFilter("txt files (*txt)", "txt");
        }

        JFileChooser jFileChooser = new JFileChooser();
        jFileChooser.setDialogTitle("Scegli cartella destinazione");
        jFileChooser.addChoosableFileFilter(grfFilter);
        jFileChooser.setFileFilter(grfFilter);

        File file = null;

        if (jFileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            file = jFileChooser.getSelectedFile();

            return file;
        } else {
            System.out.println("Nessun percorso selezionato");
            return null;
        }

    }

    private void resetComponent() {

        report_jMenuItem.setEnabled(false);
        calcolaFermate_jButton.setEnabled(false);
        calcolaFermate2_jButton.setEnabled(false);

        tratteInput_jTextArea.setText("");
        utentiInput_jTextArea.setText("");
        sLat_jTextField.setText("");
        sLon_jTextField.setText("");
        dLat_jTextField.setText("");
        dLon_jTextField.setText("");
        dijkstraOutput_jTextArea.setText("");
        lat_jTextField.setText("");
        lon_jTextField.setText("");
        visitaOutput_jTextArea.setText("");

        tratteOutput_jPanel.removeAll();
        tratteOutput_jPanel.validate();
        studentiOutput_jPanel.removeAll();
        studentiOutput_jPanel.validate();
        calcolaFermate_jPanel.removeAll();
        calcolaFermate_jPanel.validate();
        valueOutput_jPanel.removeAll();
        valueOutput_jPanel.validate();
    }

    private void resetMark() {
        for (Iterator<Node> it = nodes.values().iterator(); it.hasNext();) {
            Node node = it.next();
            node.setMark(-1);

            for (Iterator<Arc> it1 = node.nd_arcs.iterator(); it1.hasNext();) {
                Arc arc = it1.next();
                arc.setMark(0);
            }
        }
    }

    private void resetStudent() {
        for (Iterator<Node> it = nodes.values().iterator(); it.hasNext();) {
            Node node = it.next();
            node.setNum_studenti(0);
        }
    }

    private void cancel() {
        nodes = null;
        arcs = null;
        nodes_paint = null;
        arcs_paint = null;
        routes = null;
        nodes_students = null;

        mappa_jCheckBox.setEnabled(false);
        tratte_jCheckBox.setEnabled(false);
        utenti_jCheckBox.setEnabled(false);
        reset_jMenuItem.setEnabled(false);
        cancella_jMenuItem.setEnabled(false);
        jTabbedPane.setEnabled(false);
    }

    private Node getNodoVicinoByXY(int x, int y) {

        Node ndOut = null;

        int minX = Integer.MAX_VALUE;
        int maxX = Integer.MIN_VALUE;
        int minY = Integer.MAX_VALUE;
        int maxY = Integer.MIN_VALUE;

        if (nodes_paint != null && arcs_paint != null) {
            for (Node n : nodes_paint.values()) {
                if (n.getX() > maxX) {
                    maxX = n.getX();
                }
                if (n.getX() < minX) {
                    minX = n.getX();
                }
                if (n.getY() > maxY) {
                    maxY = n.getY();
                }
                if (n.getY() < minY) {
                    minY = n.getY();
                }
            }

            double h = ((maxY - minY));
            double w = ((maxX - minX));

            double rap = 1.0;
            double rh = h / w;
            double rhC = (mappaPlot_jPanel.getSize().height * zoom) / (mappaPlot_jPanel.getSize().width * zoom);
            if (rh > rhC) {
                rap = (mappaPlot_jPanel.getSize().height * zoom) / h;
            } else {
                rap = (mappaPlot_jPanel.getSize().width * zoom) / w;
            }

            minX = (int) (minX + sfasx / rap);
            minY = (int) (minY + sfasy / rap);

            double dist = Double.MAX_VALUE;

            for (Node n : nodes_paint.values()) {
                double x1 = (n.getX() - minX) * rap;
                double y1 = (n.getY() - minY) * rap;
                double d = (x - x1) * (x - x1) + (y - y1) * (y - y1);
                if (d < dist) {
                    dist = d;
                    ndOut = n;
                }

            }
        }
        return ndOut;
    }

    private boolean disegnaMap(File file) {
        if (file != null) {
            if (importPlotMap.readFile(file)) {
                nodes = importPlotMap.getNodes();
                arcs = importPlotMap.getArcs();

                //per risolvere bug --> disegna parte del grafo quando si crea la mappa importata
                nodes_paint = nodes;
                arcs_paint = arcs;

                return true;
            }
        }
        return false;
    }

    private boolean esportaMap(File file) {
        if (file != null) {
            export.exportMap(file, nodes, arcs);
            nodes = export.getNodes();
            arcs = export.getArcs();

            //manca controllo nodes, arcs is empty
            return true;
        }

        return false;
    }

    private void writeRoute() {
        tratteOutput_jPanel.removeAll();
        tratteOutput_jPanel.validate();

        for (Iterator<Route> it = routes.iterator(); it.hasNext();) {
            Route route = it.next();

            String name = route.getName();
            Color color = route.getColor();
            int numFermate = route.getNumFermate();
            double distanza = route.getDistanza();

            JLabel name_JLabel = new JLabel("Tratta: " + name);
            name_JLabel.setForeground(color);
            JLabel numFermate_JLabel = new JLabel("Fermate: " + numFermate);
            JLabel distanza_JLabel = new JLabel("Lunghezza: " + (int) distanza + "m");
            JSeparator jSeparator = new JSeparator();

            tratteOutput_jPanel.add(name_JLabel);
            tratteOutput_jPanel.add(numFermate_JLabel);
            tratteOutput_jPanel.add(distanza_JLabel);
            tratteOutput_jPanel.add(jSeparator);
        }
        tratte_jPanel.validate();
    }

    private void writeStudents() {
        studentiOutput_jPanel.removeAll();
        studentiOutput_jPanel.validate();
        for (Iterator<Route> it = routes.iterator(); it.hasNext();) {
            Route route = it.next();

            for (Iterator<Node> it1 = nodes_students.iterator(); it1.hasNext();) {
                Node node = it1.next();
                Route route_student = node.getRoute();

                if (route_student == route) {
                    int numStudents = node.getNum_studenti();
                    Color color_route = node.getRoute().getColor();

                    int idealStop = node.getIdealStop().getIndex();
                    double distanza = node.getIdealPercorso().getDistanza();

                    JLabel numStudents_JLabel = new JLabel("Studenti: " + node.getIndex() + "   n: " + numStudents);
                    JLabel route_JLabel = new JLabel("Tratta: " + route_student.getName() + "   stop ideale: " + idealStop);
                    route_JLabel.setForeground(color_route);
                    JLabel distanza_JLabel = new JLabel("Distanza: " + (int) distanza + "m");
                    JSeparator jSeparator = new JSeparator();

                    studentiOutput_jPanel.add(numStudents_JLabel);
                    studentiOutput_jPanel.add(route_JLabel);
                    studentiOutput_jPanel.add(distanza_JLabel);
                    studentiOutput_jPanel.add(jSeparator);
                }

            }

        }

        studentiOutput_jPanel.validate();
    }

    private void writeStops() {
        calcolaFermate_jPanel.removeAll();
        calcolaFermate_jPanel.validate();
        for (Iterator<Route> it = routes.iterator(); it.hasNext();) {
            Route route = it.next();

            for (Iterator<Node> it1 = nodes_students.iterator(); it1.hasNext();) {
                Node node = it1.next();
                Route route_student = node.getRoute();

                if (route_student == route) {
                    int numStudents = node.getNum_studenti();
                    Color color_route = node.getRoute().getColor();

                    int realStop = node.getRealStop().getIndex();
                    double distanza = node.getRealPercorso().getDistanza();

                    JLabel numStudents_JLabel = new JLabel("Studenti: " + node.getIndex() + "   n: " + numStudents);
                    JLabel route_JLabel = new JLabel("Tratta: " + route_student.getName() + "   stop: " + realStop);
                    route_JLabel.setForeground(color_route);
                    JLabel distanza_JLabel = new JLabel("Distanza: " + (int) distanza + "m");
                    JSeparator jSeparator = new JSeparator();

                    calcolaFermate_jPanel.add(numStudents_JLabel);
                    calcolaFermate_jPanel.add(route_JLabel);
                    calcolaFermate_jPanel.add(distanza_JLabel);
                    calcolaFermate_jPanel.add(jSeparator);
                }

            }

        }

        calcolaFermate_jPanel.validate();
    }

    private void writeValue() {
        valueOutput_jPanel.removeAll();
        valueOutput_jPanel.validate();
        for (Iterator<Route> it = routes.iterator(); it.hasNext();) {
            Route route = it.next();

            JLabel route_JLabel = new JLabel("Tratta: " + route.getName() + "   value: " + route.getMinCombination().getValue());
            route_JLabel.setForeground(route.getColor());
            JSeparator jSeparator = new JSeparator();

            valueOutput_jPanel.add(route_JLabel);
            valueOutput_jPanel.add(jSeparator);

        }

        valueOutput_jPanel.validate();
    }

    private void disegna(Graphics gg) {

        Graphics2D g = (Graphics2D) gg;
        g.setColor(Color.black);

        int minX = Integer.MAX_VALUE;
        int maxX = Integer.MIN_VALUE;
        int minY = Integer.MAX_VALUE;
        int maxY = Integer.MIN_VALUE;

        if (nodes_paint != null && arcs_paint != null) {
            for (Node n : nodes_paint.values()) {
                if (n.getX() > maxX) {
                    maxX = (n.getX());
                }
                if (n.getX() < minX) {
                    minX = (n.getX());
                }
                if (n.getY() > maxY) {
                    maxY = (n.getY());
                }
                if (n.getY() < minY) {
                    minY = (n.getY());
                }
            }

            double h = ((maxY - minY));
            double w = ((maxX - minX));

            double rap = 1;
            double rh = h / w;
            double rhC = (mappaPlot_jPanel.getSize().height * zoom) / (mappaPlot_jPanel.getSize().width * zoom);
            if (rh > rhC) {
                rap = (mappaPlot_jPanel.getSize().height * zoom) / h;
            } else {
                rap = (mappaPlot_jPanel.getSize().width * zoom) / w;
            }

            minX = (int) (minX + sfasx / rap);
            minY = (int) (minY + sfasy / rap);

            if (plotMap) {
                //Disegna archi
                for (Arc arc : arcs_paint) {

                    if (arc.getMark() == 1) {
                        g.setColor(Color.blue);
                        g.setStroke(new BasicStroke(2));
                    }
                    if (arc.getMark() == 0) {
                        g.setColor(Color.black);
                        g.setStroke(new BasicStroke(1));

                    }
                    double x1 = (arc.getFrom().getX() - minX) * rap;
                    double y1 = (arc.getFrom().getY() - minY) * rap;
                    double x2 = (arc.getTo().getX() - minX) * rap;
                    double y2 = (arc.getTo().getY() - minY) * rap;

                    g.drawLine((int) x1, (int) y1, (int) x2, (int) y2);
                }

                //Disegna nodi
                for (Node n : nodes_paint.values()) {
                    double x1 = (n.getX() - minX) * rap;
                    double y1 = (n.getY() - minY) * rap;
                    int mark = n.getMark();

                    switch (mark) {
                        case -1:
                            g.setColor(Color.black);
                            break;
                        case 0:
                            g.setColor(Color.red);
                            g.setFont(new Font("Arial", Font.PLAIN, (int) (8 * zoom)));
                            g.drawString("" + n.getIndex(), (int) x1, (int) y1);
                            break;
                        case 1:
                            g.setColor(Color.blue);
                            g.setFont(new Font("Arial", Font.PLAIN, (int) (8 * zoom)));
                            g.drawString("" + n.getIndex(), (int) x1, (int) y1);
                            break;
                    }
                }
            }

            //Disegna tratte
            if (routes != null && plotRoute) {
                for (Iterator<Route> it = routes.iterator(); it.hasNext();) {
                    Route r = it.next();

                    g.setColor(r.getColor());

                    for (int i = 0; i < r.getPercorso().getNodes().size(); i++) {
                        Node r_n = r.getPercorso().getNodes().get(i);

                        double x = (r_n.getX() - minX) * rap;
                        double y = (r_n.getY() - minY) * rap;

                        //g.setFont(new Font("Arial", Font.PLAIN, (int) (12 * zoom)));
                        //g.drawString("" + r_n.getIndex(), (int) x, (int) y);
                        //g.fillRect((int) x, (int) y, (int) (5 * zoom), (int) (5 * zoom));
                        if (i != r.getPercorso().getNodes().size() - 1) {
                            Arc arc = Arc.arcByFromTo(r_n, r.getPercorso().getNodes().get(i + 1));

                            double x1 = (arc.getFrom().getX() - minX) * rap;
                            double y1 = (arc.getFrom().getY() - minY) * rap;
                            double x2 = (arc.getTo().getX() - minX) * rap;
                            double y2 = (arc.getTo().getY() - minY) * rap;

                            g.setStroke(new BasicStroke(2));
                            g.drawLine((int) x1, (int) y1, (int) x2, (int) y2);

                        }
                    }

                    if (r.getFermate_effettive() != null) {
                        for (int j = 0; j < r.getFermate_effettive().size(); j++) {
                            Node stop = r.getFermate_effettive().get(j);

                            double x = (stop.getX() - minX) * rap;
                            double y = (stop.getY() - minY) * rap;

                            g.setColor(Color.red);
                            g.fillRect((int) x, (int) y, (int) (10 * zoom), (int) (10 * zoom));

                        }
                    }
                }

                //Disegna studenti
                if (nodes_students != null && plotStudents) {
                    for (Node n : nodes_students) {
                        double x1 = (n.getX() - minX) * rap;
                        double y1 = (n.getY() - minY) * rap;

                        //studenti
                        Route route = n.getRoute();
                        int num_studenti = n.getNum_studenti();

                        if (num_studenti > 0) {
                            g.setColor(route.getColor());
                            g.fillOval((int) x1, (int) y1, num_studenti, num_studenti);
                            g.setFont(new Font("Arial", Font.PLAIN, (int) (12 * zoom)));
                            //g.drawString("" + n.getNum_studenti(), (int) x1, (int) y1); //
                            g.drawString("" + n.getIndex(), (int) x1, (int) y1);
                        }

                    }
                }
            }
        }
    }
}
